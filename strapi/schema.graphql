### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AboutUsPage {
  createdAt: DateTime
  highlights(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  locale: String
  localizations: AboutUsPageRelationResponseCollection
  sections: [AboutUsPageSectionsDynamicZone]
  seo: ComponentBlocksSeo
  updatedAt: DateTime
}

type AboutUsPageEntity {
  attributes: AboutUsPage
  id: ID
}

type AboutUsPageEntityResponse {
  data: AboutUsPageEntity
}

type AboutUsPageEntityResponseCollection {
  data: [AboutUsPageEntity!]!
  meta: ResponseCollectionMeta!
}

input AboutUsPageFiltersInput {
  and: [AboutUsPageFiltersInput]
  createdAt: DateTimeFilterInput
  highlights: ComponentBlocksContentPageItemFiltersInput
  locale: StringFilterInput
  localizations: AboutUsPageFiltersInput
  not: AboutUsPageFiltersInput
  or: [AboutUsPageFiltersInput]
  seo: ComponentBlocksSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input AboutUsPageInput {
  highlights: [ComponentBlocksContentPageItemInput]
  sections: [AboutUsPageSectionsDynamicZoneInput!]
  seo: ComponentBlocksSeoInput
}

type AboutUsPageRelationResponseCollection {
  data: [AboutUsPageEntity!]!
}

union AboutUsPageSectionsDynamicZone = ComponentSectionsNewsSection | ComponentSectionsNewsletterSection | ComponentSectionsOpeningHoursSection | ComponentSectionsPageSection | Error

scalar AboutUsPageSectionsDynamicZoneInput

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type CollectionsPage {
  createdAt: DateTime
  highlights(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  locale: String
  localizations: CollectionsPageRelationResponseCollection
  sections: [CollectionsPageSectionsDynamicZone]
  seo: ComponentBlocksSeo
  updatedAt: DateTime
}

type CollectionsPageEntity {
  attributes: CollectionsPage
  id: ID
}

type CollectionsPageEntityResponse {
  data: CollectionsPageEntity
}

type CollectionsPageEntityResponseCollection {
  data: [CollectionsPageEntity!]!
  meta: ResponseCollectionMeta!
}

input CollectionsPageFiltersInput {
  and: [CollectionsPageFiltersInput]
  createdAt: DateTimeFilterInput
  highlights: ComponentBlocksContentPageItemFiltersInput
  locale: StringFilterInput
  localizations: CollectionsPageFiltersInput
  not: CollectionsPageFiltersInput
  or: [CollectionsPageFiltersInput]
  seo: ComponentBlocksSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input CollectionsPageInput {
  highlights: [ComponentBlocksContentPageItemInput]
  sections: [CollectionsPageSectionsDynamicZoneInput!]
  seo: ComponentBlocksSeoInput
}

type CollectionsPageRelationResponseCollection {
  data: [CollectionsPageEntity!]!
}

union CollectionsPageSectionsDynamicZone = ComponentSectionsNewsSection | ComponentSectionsNewsletterSection | ComponentSectionsOpeningHoursSection | ComponentSectionsPageSection | Error

scalar CollectionsPageSectionsDynamicZoneInput

type ComponentBlocksContactCardItem {
  contactCard: ContactCardEntityResponse
  id: ID!
}

input ComponentBlocksContactCardItemFiltersInput {
  and: [ComponentBlocksContactCardItemFiltersInput]
  contactCard: ContactCardFiltersInput
  not: ComponentBlocksContactCardItemFiltersInput
  or: [ComponentBlocksContactCardItemFiltersInput]
}

input ComponentBlocksContactCardItemInput {
  contactCard: ID
  id: ID
}

type ComponentBlocksContentPageItem {
  contentPage: ContentPageEntityResponse
  id: ID!
}

input ComponentBlocksContentPageItemFiltersInput {
  and: [ComponentBlocksContentPageItemFiltersInput]
  contentPage: ContentPageFiltersInput
  not: ComponentBlocksContentPageItemFiltersInput
  or: [ComponentBlocksContentPageItemFiltersInput]
}

input ComponentBlocksContentPageItemInput {
  contentPage: ID
  id: ID
}

type ComponentBlocksExhibitionArchive {
  color: String
  coverMedia: UploadFileEntityResponse
  id: ID!
  perex: String
  subtitle: String
  title: String!
}

input ComponentBlocksExhibitionArchiveFiltersInput {
  and: [ComponentBlocksExhibitionArchiveFiltersInput]
  color: StringFilterInput
  not: ComponentBlocksExhibitionArchiveFiltersInput
  or: [ComponentBlocksExhibitionArchiveFiltersInput]
  perex: StringFilterInput
  subtitle: StringFilterInput
  title: StringFilterInput
}

input ComponentBlocksExhibitionArchiveInput {
  color: String
  coverMedia: ID
  id: ID
  perex: String
  subtitle: String
  title: String
}

type ComponentBlocksFileItem {
  file: UploadFileEntityResponse!
  id: ID!
  title: String
}

input ComponentBlocksFileItemFiltersInput {
  and: [ComponentBlocksFileItemFiltersInput]
  not: ComponentBlocksFileItemFiltersInput
  or: [ComponentBlocksFileItemFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksFileItemInput {
  file: ID
  id: ID
  title: String
}

type ComponentBlocksHighlightOverride {
  highlightContent: String
  id: ID!
}

input ComponentBlocksHighlightOverrideFiltersInput {
  and: [ComponentBlocksHighlightOverrideFiltersInput]
  highlightContent: StringFilterInput
  not: ComponentBlocksHighlightOverrideFiltersInput
  or: [ComponentBlocksHighlightOverrideFiltersInput]
}

input ComponentBlocksHighlightOverrideInput {
  highlightContent: String
  id: ID
}

type ComponentBlocksLinkItem {
  id: ID!
  newWindow: Boolean
  title: String!
  url: String
}

input ComponentBlocksLinkItemFiltersInput {
  and: [ComponentBlocksLinkItemFiltersInput]
  newWindow: BooleanFilterInput
  not: ComponentBlocksLinkItemFiltersInput
  or: [ComponentBlocksLinkItemFiltersInput]
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentBlocksLinkItemInput {
  id: ID
  newWindow: Boolean
  title: String
  url: String
}

type ComponentBlocksLinks {
  id: ID!
  links(filters: ComponentBlocksLinkItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksLinkItem]
  title: String
}

input ComponentBlocksLinksFiltersInput {
  and: [ComponentBlocksLinksFiltersInput]
  links: ComponentBlocksLinkItemFiltersInput
  not: ComponentBlocksLinksFiltersInput
  or: [ComponentBlocksLinksFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksLinksInput {
  id: ID
  links: [ComponentBlocksLinkItemInput]
  title: String
}

type ComponentBlocksMenuLinkItem {
  hasButtonStyle: Boolean
  id: ID!
  mainPage: MainPageEntityResponse
  title: String!
  url: String
}

input ComponentBlocksMenuLinkItemFiltersInput {
  and: [ComponentBlocksMenuLinkItemFiltersInput]
  hasButtonStyle: BooleanFilterInput
  mainPage: MainPageFiltersInput
  not: ComponentBlocksMenuLinkItemFiltersInput
  or: [ComponentBlocksMenuLinkItemFiltersInput]
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentBlocksMenuLinkItemInput {
  hasButtonStyle: Boolean
  id: ID
  mainPage: ID
  title: String
  url: String
}

type ComponentBlocksPalace {
  address: String
  city: String
  id: ID!
  phone: String
  title: String
  zip: String
}

input ComponentBlocksPalaceFiltersInput {
  address: StringFilterInput
  and: [ComponentBlocksPalaceFiltersInput]
  city: StringFilterInput
  not: ComponentBlocksPalaceFiltersInput
  or: [ComponentBlocksPalaceFiltersInput]
  phone: StringFilterInput
  title: StringFilterInput
  zip: StringFilterInput
}

input ComponentBlocksPalaceInput {
  address: String
  city: String
  id: ID
  phone: String
  title: String
  zip: String
}

type ComponentBlocksPartnerItem {
  id: ID!
  partner: PartnerEntityResponse
}

input ComponentBlocksPartnerItemFiltersInput {
  and: [ComponentBlocksPartnerItemFiltersInput]
  not: ComponentBlocksPartnerItemFiltersInput
  or: [ComponentBlocksPartnerItemFiltersInput]
  partner: PartnerFiltersInput
}

input ComponentBlocksPartnerItemInput {
  id: ID
  partner: ID
}

type ComponentBlocksPositionItem {
  id: ID!
  names: String
  title: String
}

input ComponentBlocksPositionItemFiltersInput {
  and: [ComponentBlocksPositionItemFiltersInput]
  names: StringFilterInput
  not: ComponentBlocksPositionItemFiltersInput
  or: [ComponentBlocksPositionItemFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksPositionItemInput {
  id: ID
  names: String
  title: String
}

type ComponentBlocksSeo {
  id: ID!
  keywords: String
  metaDescription: String
  metaImage: UploadFileEntityResponse
  metaTitle: String
}

input ComponentBlocksSeoFiltersInput {
  and: [ComponentBlocksSeoFiltersInput]
  keywords: StringFilterInput
  metaDescription: StringFilterInput
  metaTitle: StringFilterInput
  not: ComponentBlocksSeoFiltersInput
  or: [ComponentBlocksSeoFiltersInput]
}

input ComponentBlocksSeoInput {
  id: ID
  keywords: String
  metaDescription: String
  metaImage: ID
  metaTitle: String
}

type ComponentSectionsArchiveBannerSection {
  banner: ComponentBlocksExhibitionArchive
  id: ID!
  submenuTitle: String
  title: String
}

input ComponentSectionsArchiveBannerSectionFiltersInput {
  and: [ComponentSectionsArchiveBannerSectionFiltersInput]
  banner: ComponentBlocksExhibitionArchiveFiltersInput
  not: ComponentSectionsArchiveBannerSectionFiltersInput
  or: [ComponentSectionsArchiveBannerSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsArchiveBannerSectionInput {
  banner: ComponentBlocksExhibitionArchiveInput
  id: ID
  submenuTitle: String
  title: String
}

type ComponentSectionsArchiveSection {
  archiveCard: ComponentBlocksExhibitionArchive
  id: ID!
  submenuTitle: String
  title: String
}

input ComponentSectionsArchiveSectionFiltersInput {
  and: [ComponentSectionsArchiveSectionFiltersInput]
  archiveCard: ComponentBlocksExhibitionArchiveFiltersInput
  not: ComponentSectionsArchiveSectionFiltersInput
  or: [ComponentSectionsArchiveSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsArchiveSectionInput {
  archiveCard: ComponentBlocksExhibitionArchiveInput
  id: ID
  submenuTitle: String
  title: String
}

type ComponentSectionsAudioSection {
  id: ID!
  submenuTitle: String
  title: String
  url: String
}

input ComponentSectionsAudioSectionFiltersInput {
  and: [ComponentSectionsAudioSectionFiltersInput]
  not: ComponentSectionsAudioSectionFiltersInput
  or: [ComponentSectionsAudioSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentSectionsAudioSectionInput {
  id: ID
  submenuTitle: String
  title: String
  url: String
}

type ComponentSectionsContactCardsSection {
  contacts(filters: ComponentBlocksContactCardItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContactCardItem]
  id: ID!
  submenuTitle: String
  title: String
}

input ComponentSectionsContactCardsSectionFiltersInput {
  and: [ComponentSectionsContactCardsSectionFiltersInput]
  contacts: ComponentBlocksContactCardItemFiltersInput
  not: ComponentSectionsContactCardsSectionFiltersInput
  or: [ComponentSectionsContactCardsSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsContactCardsSectionInput {
  contacts: [ComponentBlocksContactCardItemInput]
  id: ID
  submenuTitle: String
  title: String
}

type ComponentSectionsDisclosureSection {
  additionalFilesSection: ComponentSectionsDownloadSection
  id: ID!
  submenuTitle: String
  title: String
}

input ComponentSectionsDisclosureSectionFiltersInput {
  additionalFilesSection: ComponentSectionsDownloadSectionFiltersInput
  and: [ComponentSectionsDisclosureSectionFiltersInput]
  not: ComponentSectionsDisclosureSectionFiltersInput
  or: [ComponentSectionsDisclosureSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsDisclosureSectionInput {
  additionalFilesSection: ComponentSectionsDownloadSectionInput
  id: ID
  submenuTitle: String
  title: String
}

type ComponentSectionsDownloadSection {
  files(filters: ComponentBlocksFileItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksFileItem]
  id: ID!
  submenuTitle: String
  title: String
}

input ComponentSectionsDownloadSectionFiltersInput {
  and: [ComponentSectionsDownloadSectionFiltersInput]
  files: ComponentBlocksFileItemFiltersInput
  not: ComponentSectionsDownloadSectionFiltersInput
  or: [ComponentSectionsDownloadSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsDownloadSectionInput {
  files: [ComponentBlocksFileItemInput]
  id: ID
  submenuTitle: String
  title: String
}

type ComponentSectionsExhibitionArchiveSection {
  id: ID!
  title: String
}

input ComponentSectionsExhibitionArchiveSectionFiltersInput {
  and: [ComponentSectionsExhibitionArchiveSectionFiltersInput]
  not: ComponentSectionsExhibitionArchiveSectionFiltersInput
  or: [ComponentSectionsExhibitionArchiveSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsExhibitionArchiveSectionInput {
  id: ID
  title: String
}

type ComponentSectionsExhibitionsSection {
  archiveBannerSection: ComponentSectionsArchiveBannerSection
  id: ID!
  title: String
}

input ComponentSectionsExhibitionsSectionFiltersInput {
  and: [ComponentSectionsExhibitionsSectionFiltersInput]
  archiveBannerSection: ComponentSectionsArchiveBannerSectionFiltersInput
  not: ComponentSectionsExhibitionsSectionFiltersInput
  or: [ComponentSectionsExhibitionsSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsExhibitionsSectionInput {
  archiveBannerSection: ComponentSectionsArchiveBannerSectionInput
  id: ID
  title: String
}

type ComponentSectionsExploreSection {
  id: ID!
  title: String
}

input ComponentSectionsExploreSectionFiltersInput {
  and: [ComponentSectionsExploreSectionFiltersInput]
  not: ComponentSectionsExploreSectionFiltersInput
  or: [ComponentSectionsExploreSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsExploreSectionInput {
  id: ID
  title: String
}

type ComponentSectionsGallerySection {
  id: ID!
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  submenuTitle: String
  title: String
}

input ComponentSectionsGallerySectionFiltersInput {
  and: [ComponentSectionsGallerySectionFiltersInput]
  not: ComponentSectionsGallerySectionFiltersInput
  or: [ComponentSectionsGallerySectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsGallerySectionInput {
  id: ID
  medias: [ID]
  submenuTitle: String
  title: String
}

type ComponentSectionsGlobalSearchSection {
  id: ID!
  title: String
}

input ComponentSectionsGlobalSearchSectionFiltersInput {
  and: [ComponentSectionsGlobalSearchSectionFiltersInput]
  not: ComponentSectionsGlobalSearchSectionFiltersInput
  or: [ComponentSectionsGlobalSearchSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsGlobalSearchSectionInput {
  id: ID
  title: String
}

type ComponentSectionsHighlightsSection {
  highlights(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  id: ID!
}

input ComponentSectionsHighlightsSectionFiltersInput {
  and: [ComponentSectionsHighlightsSectionFiltersInput]
  highlights: ComponentBlocksContentPageItemFiltersInput
  not: ComponentSectionsHighlightsSectionFiltersInput
  or: [ComponentSectionsHighlightsSectionFiltersInput]
}

input ComponentSectionsHighlightsSectionInput {
  highlights: [ComponentBlocksContentPageItemInput]
  id: ID
}

type ComponentSectionsMapSection {
  id: ID!
  submenuTitle: String
  title: String
}

input ComponentSectionsMapSectionFiltersInput {
  and: [ComponentSectionsMapSectionFiltersInput]
  not: ComponentSectionsMapSectionFiltersInput
  or: [ComponentSectionsMapSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsMapSectionInput {
  id: ID
  submenuTitle: String
  title: String
}

type ComponentSectionsNewsSection {
  id: ID!
  submenuTitle: String
  title: String
}

input ComponentSectionsNewsSectionFiltersInput {
  and: [ComponentSectionsNewsSectionFiltersInput]
  not: ComponentSectionsNewsSectionFiltersInput
  or: [ComponentSectionsNewsSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsNewsSectionInput {
  id: ID
  submenuTitle: String
  title: String
}

type ComponentSectionsNewsletterSection {
  id: ID!
  submenuTitle: String
}

input ComponentSectionsNewsletterSectionFiltersInput {
  and: [ComponentSectionsNewsletterSectionFiltersInput]
  not: ComponentSectionsNewsletterSectionFiltersInput
  or: [ComponentSectionsNewsletterSectionFiltersInput]
  submenuTitle: StringFilterInput
}

input ComponentSectionsNewsletterSectionInput {
  id: ID
  submenuTitle: String
}

type ComponentSectionsOpeningHoursSection {
  id: ID!
  submenuTitle: String
}

input ComponentSectionsOpeningHoursSectionFiltersInput {
  and: [ComponentSectionsOpeningHoursSectionFiltersInput]
  not: ComponentSectionsOpeningHoursSectionFiltersInput
  or: [ComponentSectionsOpeningHoursSectionFiltersInput]
  submenuTitle: StringFilterInput
}

input ComponentSectionsOpeningHoursSectionInput {
  id: ID
  submenuTitle: String
}

type ComponentSectionsPageSection {
  contentPages(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  id: ID!
  layout: ENUM_COMPONENTSECTIONSPAGESECTION_LAYOUT
  submenuTitle: String
  title: String
}

input ComponentSectionsPageSectionFiltersInput {
  and: [ComponentSectionsPageSectionFiltersInput]
  contentPages: ComponentBlocksContentPageItemFiltersInput
  layout: StringFilterInput
  not: ComponentSectionsPageSectionFiltersInput
  or: [ComponentSectionsPageSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsPageSectionInput {
  contentPages: [ComponentBlocksContentPageItemInput]
  id: ID
  layout: ENUM_COMPONENTSECTIONSPAGESECTION_LAYOUT
  submenuTitle: String
  title: String
}

type ComponentSectionsPartnersSection {
  id: ID!
  partners(filters: ComponentBlocksPartnerItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksPartnerItem]
  submenuTitle: String
  title: String
}

input ComponentSectionsPartnersSectionFiltersInput {
  and: [ComponentSectionsPartnersSectionFiltersInput]
  not: ComponentSectionsPartnersSectionFiltersInput
  or: [ComponentSectionsPartnersSectionFiltersInput]
  partners: ComponentBlocksPartnerItemFiltersInput
  submenuTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsPartnersSectionInput {
  id: ID
  partners: [ComponentBlocksPartnerItemInput]
  submenuTitle: String
  title: String
}

type ComponentSectionsRichtextSection {
  content: String
  id: ID!
  submenuTitle: String
}

input ComponentSectionsRichtextSectionFiltersInput {
  and: [ComponentSectionsRichtextSectionFiltersInput]
  content: StringFilterInput
  not: ComponentSectionsRichtextSectionFiltersInput
  or: [ComponentSectionsRichtextSectionFiltersInput]
  submenuTitle: StringFilterInput
}

input ComponentSectionsRichtextSectionInput {
  content: String
  id: ID
  submenuTitle: String
}

type ComponentSectionsSliderSection {
  id: ID!
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  submenuTitle: String
}

input ComponentSectionsSliderSectionFiltersInput {
  and: [ComponentSectionsSliderSectionFiltersInput]
  not: ComponentSectionsSliderSectionFiltersInput
  or: [ComponentSectionsSliderSectionFiltersInput]
  submenuTitle: StringFilterInput
}

input ComponentSectionsSliderSectionInput {
  id: ID
  medias: [ID]
  submenuTitle: String
}

type ComponentSectionsTicketsSection {
  id: ID!
  submenuTitle: String
  text: String
  title: String
}

input ComponentSectionsTicketsSectionFiltersInput {
  and: [ComponentSectionsTicketsSectionFiltersInput]
  not: ComponentSectionsTicketsSectionFiltersInput
  or: [ComponentSectionsTicketsSectionFiltersInput]
  submenuTitle: StringFilterInput
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsTicketsSectionInput {
  id: ID
  submenuTitle: String
  text: String
  title: String
}

type ComponentSectionsVideoSection {
  id: ID!
  submenuTitle: String
  title: String
  url: String
}

input ComponentSectionsVideoSectionFiltersInput {
  and: [ComponentSectionsVideoSectionFiltersInput]
  not: ComponentSectionsVideoSectionFiltersInput
  or: [ComponentSectionsVideoSectionFiltersInput]
  submenuTitle: StringFilterInput
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentSectionsVideoSectionInput {
  id: ID
  submenuTitle: String
  title: String
  url: String
}

type ContactCard {
  createdAt: DateTime
  email: String
  locale: String
  localizations(filters: ContactCardFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContactCardRelationResponseCollection
  name: String!
  phone1: String
  phone2: String
  position: String
  updatedAt: DateTime
}

type ContactCardEntity {
  attributes: ContactCard
  id: ID
}

type ContactCardEntityResponse {
  data: ContactCardEntity
}

type ContactCardEntityResponseCollection {
  data: [ContactCardEntity!]!
  meta: ResponseCollectionMeta!
}

input ContactCardFiltersInput {
  and: [ContactCardFiltersInput]
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ContactCardFiltersInput
  name: StringFilterInput
  not: ContactCardFiltersInput
  or: [ContactCardFiltersInput]
  phone1: StringFilterInput
  phone2: StringFilterInput
  position: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ContactCardInput {
  email: String
  name: String
  phone1: String
  phone2: String
  position: String
}

type ContactCardRelationResponseCollection {
  data: [ContactCardEntity!]!
}

type ContentPage {
  addedAt: DateTime
  childPages(filters: ContentPageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContentPageRelationResponseCollection
  color: String
  coverMedia: UploadFileEntityResponse
  createdAt: DateTime
  dateFrom: Date
  dateTo: Date
  downloadSection: ComponentSectionsDownloadSection
  inheritColorFromParent: Boolean
  locale: String
  localizations(filters: ContentPageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContentPageRelationResponseCollection
  mainContent: [ContentPageMainContentDynamicZone]
  override: ComponentBlocksHighlightOverride
  parentPage: ContentPageEntityResponse
  partners(filters: ComponentBlocksPartnerItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksPartnerItem]
  perex: String
  place: PlaceEntityResponse
  placeAddress: String
  placeTitle: String
  positions(filters: ComponentBlocksPositionItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksPositionItem]
  publishedAt: DateTime
  purchaseId: String
  relatedContentSubmenuTitle: String
  relatedContentTitle: String
  sellTickets: Boolean
  seo: ComponentBlocksSeo
  showRemainingTime: Boolean
  showShareButtons: Boolean
  slider: ComponentSectionsSliderSection
  slug: String!
  subtitle: String
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  timeFrom: Time
  timeTo: Time
  title: String!
  titleToShow: String
  updatedAt: DateTime
  useDatetimeAsSubtitle: Boolean
}

type ContentPageEntity {
  attributes: ContentPage
  id: ID
}

type ContentPageEntityResponse {
  data: ContentPageEntity
}

type ContentPageEntityResponseCollection {
  data: [ContentPageEntity!]!
  meta: ResponseCollectionMeta!
}

input ContentPageFiltersInput {
  addedAt: DateTimeFilterInput
  and: [ContentPageFiltersInput]
  childPages: ContentPageFiltersInput
  color: StringFilterInput
  createdAt: DateTimeFilterInput
  dateFrom: DateFilterInput
  dateTo: DateFilterInput
  downloadSection: ComponentSectionsDownloadSectionFiltersInput
  id: IDFilterInput
  inheritColorFromParent: BooleanFilterInput
  locale: StringFilterInput
  localizations: ContentPageFiltersInput
  not: ContentPageFiltersInput
  or: [ContentPageFiltersInput]
  override: ComponentBlocksHighlightOverrideFiltersInput
  parentPage: ContentPageFiltersInput
  partners: ComponentBlocksPartnerItemFiltersInput
  perex: StringFilterInput
  place: PlaceFiltersInput
  placeAddress: StringFilterInput
  placeTitle: StringFilterInput
  positions: ComponentBlocksPositionItemFiltersInput
  publishedAt: DateTimeFilterInput
  purchaseId: StringFilterInput
  relatedContentSubmenuTitle: StringFilterInput
  relatedContentTitle: StringFilterInput
  sellTickets: BooleanFilterInput
  seo: ComponentBlocksSeoFiltersInput
  showRemainingTime: BooleanFilterInput
  showShareButtons: BooleanFilterInput
  slider: ComponentSectionsSliderSectionFiltersInput
  slug: StringFilterInput
  subtitle: StringFilterInput
  tags: TagFiltersInput
  timeFrom: TimeFilterInput
  timeTo: TimeFilterInput
  title: StringFilterInput
  titleToShow: StringFilterInput
  updatedAt: DateTimeFilterInput
  useDatetimeAsSubtitle: BooleanFilterInput
}

input ContentPageInput {
  addedAt: DateTime
  childPages: [ID]
  color: String
  coverMedia: ID
  dateFrom: Date
  dateTo: Date
  downloadSection: ComponentSectionsDownloadSectionInput
  inheritColorFromParent: Boolean
  mainContent: [ContentPageMainContentDynamicZoneInput!]
  override: ComponentBlocksHighlightOverrideInput
  parentPage: ID
  partners: [ComponentBlocksPartnerItemInput]
  perex: String
  place: ID
  placeAddress: String
  placeTitle: String
  positions: [ComponentBlocksPositionItemInput]
  publishedAt: DateTime
  purchaseId: String
  relatedContentSubmenuTitle: String
  relatedContentTitle: String
  sellTickets: Boolean
  seo: ComponentBlocksSeoInput
  showRemainingTime: Boolean
  showShareButtons: Boolean
  slider: ComponentSectionsSliderSectionInput
  slug: String
  subtitle: String
  tags: [ID]
  timeFrom: Time
  timeTo: Time
  title: String
  titleToShow: String
  useDatetimeAsSubtitle: Boolean
}

union ContentPageMainContentDynamicZone = ComponentSectionsAudioSection | ComponentSectionsContactCardsSection | ComponentSectionsGallerySection | ComponentSectionsRichtextSection | ComponentSectionsVideoSection | Error

scalar ContentPageMainContentDynamicZoneInput

type ContentPageRelationResponseCollection {
  data: [ContentPageEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTSECTIONSPAGESECTION_LAYOUT {
  cards
  chessboard
  fullwidth
}

type Error {
  code: String!
  message: String
}

type ExhibitionsPage {
  archiveSection: ComponentSectionsArchiveSection
  archiveSeo: ComponentBlocksSeo
  createdAt: DateTime
  highlights(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  locale: String
  localizations: ExhibitionsPageRelationResponseCollection
  seo: ComponentBlocksSeo
  updatedAt: DateTime
}

type ExhibitionsPageEntity {
  attributes: ExhibitionsPage
  id: ID
}

type ExhibitionsPageEntityResponse {
  data: ExhibitionsPageEntity
}

type ExhibitionsPageEntityResponseCollection {
  data: [ExhibitionsPageEntity!]!
  meta: ResponseCollectionMeta!
}

input ExhibitionsPageFiltersInput {
  and: [ExhibitionsPageFiltersInput]
  archiveSection: ComponentSectionsArchiveSectionFiltersInput
  archiveSeo: ComponentBlocksSeoFiltersInput
  createdAt: DateTimeFilterInput
  highlights: ComponentBlocksContentPageItemFiltersInput
  locale: StringFilterInput
  localizations: ExhibitionsPageFiltersInput
  not: ExhibitionsPageFiltersInput
  or: [ExhibitionsPageFiltersInput]
  seo: ComponentBlocksSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input ExhibitionsPageInput {
  archiveSection: ComponentSectionsArchiveSectionInput
  archiveSeo: ComponentBlocksSeoInput
  highlights: [ComponentBlocksContentPageItemInput]
  seo: ComponentBlocksSeoInput
}

type ExhibitionsPageRelationResponseCollection {
  data: [ExhibitionsPageEntity!]!
}

type ExplorePage {
  createdAt: DateTime
  highlights(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  locale: String
  localizations: ExplorePageRelationResponseCollection
  seo: ComponentBlocksSeo
  updatedAt: DateTime
}

type ExplorePageEntity {
  attributes: ExplorePage
  id: ID
}

type ExplorePageEntityResponse {
  data: ExplorePageEntity
}

type ExplorePageEntityResponseCollection {
  data: [ExplorePageEntity!]!
  meta: ResponseCollectionMeta!
}

input ExplorePageFiltersInput {
  and: [ExplorePageFiltersInput]
  createdAt: DateTimeFilterInput
  highlights: ComponentBlocksContentPageItemFiltersInput
  locale: StringFilterInput
  localizations: ExplorePageFiltersInput
  not: ExplorePageFiltersInput
  or: [ExplorePageFiltersInput]
  seo: ComponentBlocksSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input ExplorePageInput {
  highlights: [ComponentBlocksContentPageItemInput]
  seo: ComponentBlocksSeoInput
}

type ExplorePageRelationResponseCollection {
  data: [ExplorePageEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

type General {
  createdAt: DateTime
  disclosureMoreFiles: ComponentSectionsDownloadSection
  email: String
  footerLinks1: ComponentBlocksLinks
  footerLinks2: ComponentBlocksLinks
  locale: String
  localizations: GeneralRelationResponseCollection
  mirbach: ComponentBlocksPalace
  name: String
  openingHours: String
  palffy: ComponentBlocksPalace
  socialLinks: ComponentBlocksLinks
  updatedAt: DateTime
}

type GeneralEntity {
  attributes: General
  id: ID
}

type GeneralEntityResponse {
  data: GeneralEntity
}

type GeneralEntityResponseCollection {
  data: [GeneralEntity!]!
  meta: ResponseCollectionMeta!
}

input GeneralFiltersInput {
  and: [GeneralFiltersInput]
  createdAt: DateTimeFilterInput
  disclosureMoreFiles: ComponentSectionsDownloadSectionFiltersInput
  email: StringFilterInput
  footerLinks1: ComponentBlocksLinksFiltersInput
  footerLinks2: ComponentBlocksLinksFiltersInput
  locale: StringFilterInput
  localizations: GeneralFiltersInput
  mirbach: ComponentBlocksPalaceFiltersInput
  name: StringFilterInput
  not: GeneralFiltersInput
  openingHours: StringFilterInput
  or: [GeneralFiltersInput]
  palffy: ComponentBlocksPalaceFiltersInput
  socialLinks: ComponentBlocksLinksFiltersInput
  updatedAt: DateTimeFilterInput
}

input GeneralInput {
  disclosureMoreFiles: ComponentSectionsDownloadSectionInput
  email: String
  footerLinks1: ComponentBlocksLinksInput
  footerLinks2: ComponentBlocksLinksInput
  mirbach: ComponentBlocksPalaceInput
  name: String
  openingHours: String
  palffy: ComponentBlocksPalaceInput
  socialLinks: ComponentBlocksLinksInput
}

type GeneralRelationResponseCollection {
  data: [GeneralEntity!]!
}

union GenericMorph = AboutUsPage | CollectionsPage | ComponentBlocksContactCardItem | ComponentBlocksContentPageItem | ComponentBlocksExhibitionArchive | ComponentBlocksFileItem | ComponentBlocksHighlightOverride | ComponentBlocksLinkItem | ComponentBlocksLinks | ComponentBlocksMenuLinkItem | ComponentBlocksPalace | ComponentBlocksPartnerItem | ComponentBlocksPositionItem | ComponentBlocksSeo | ComponentSectionsArchiveBannerSection | ComponentSectionsArchiveSection | ComponentSectionsAudioSection | ComponentSectionsContactCardsSection | ComponentSectionsDisclosureSection | ComponentSectionsDownloadSection | ComponentSectionsExhibitionArchiveSection | ComponentSectionsExhibitionsSection | ComponentSectionsExploreSection | ComponentSectionsGallerySection | ComponentSectionsGlobalSearchSection | ComponentSectionsHighlightsSection | ComponentSectionsMapSection | ComponentSectionsNewsSection | ComponentSectionsNewsletterSection | ComponentSectionsOpeningHoursSection | ComponentSectionsPageSection | ComponentSectionsPartnersSection | ComponentSectionsRichtextSection | ComponentSectionsSliderSection | ComponentSectionsTicketsSection | ComponentSectionsVideoSection | ContactCard | ContentPage | ExhibitionsPage | ExplorePage | General | GetInvolvedPage | HomePage | I18NLocale | MainPage | Menu | Partner | Place | Tag | TagCategory | Ticket | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | VisitUsPage

type GetInvolvedPage {
  createdAt: DateTime
  highlights(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  locale: String
  localizations: GetInvolvedPageRelationResponseCollection
  sections: [GetInvolvedPageSectionsDynamicZone]
  seo: ComponentBlocksSeo
  updatedAt: DateTime
}

type GetInvolvedPageEntity {
  attributes: GetInvolvedPage
  id: ID
}

type GetInvolvedPageEntityResponse {
  data: GetInvolvedPageEntity
}

type GetInvolvedPageEntityResponseCollection {
  data: [GetInvolvedPageEntity!]!
  meta: ResponseCollectionMeta!
}

input GetInvolvedPageFiltersInput {
  and: [GetInvolvedPageFiltersInput]
  createdAt: DateTimeFilterInput
  highlights: ComponentBlocksContentPageItemFiltersInput
  locale: StringFilterInput
  localizations: GetInvolvedPageFiltersInput
  not: GetInvolvedPageFiltersInput
  or: [GetInvolvedPageFiltersInput]
  seo: ComponentBlocksSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input GetInvolvedPageInput {
  highlights: [ComponentBlocksContentPageItemInput]
  sections: [GetInvolvedPageSectionsDynamicZoneInput!]
  seo: ComponentBlocksSeoInput
}

type GetInvolvedPageRelationResponseCollection {
  data: [GetInvolvedPageEntity!]!
}

union GetInvolvedPageSectionsDynamicZone = ComponentSectionsNewsSection | ComponentSectionsNewsletterSection | ComponentSectionsOpeningHoursSection | ComponentSectionsPageSection | Error

scalar GetInvolvedPageSectionsDynamicZoneInput

type HomePage {
  createdAt: DateTime
  highlights(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  locale: String
  localizations: HomePageRelationResponseCollection
  partners(filters: ComponentBlocksPartnerItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksPartnerItem]
  sections: [HomePageSectionsDynamicZone]
  seo: ComponentBlocksSeo
  updatedAt: DateTime
}

type HomePageEntity {
  attributes: HomePage
  id: ID
}

type HomePageEntityResponse {
  data: HomePageEntity
}

type HomePageEntityResponseCollection {
  data: [HomePageEntity!]!
  meta: ResponseCollectionMeta!
}

input HomePageFiltersInput {
  and: [HomePageFiltersInput]
  createdAt: DateTimeFilterInput
  highlights: ComponentBlocksContentPageItemFiltersInput
  locale: StringFilterInput
  localizations: HomePageFiltersInput
  not: HomePageFiltersInput
  or: [HomePageFiltersInput]
  partners: ComponentBlocksPartnerItemFiltersInput
  seo: ComponentBlocksSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input HomePageInput {
  highlights: [ComponentBlocksContentPageItemInput]
  partners: [ComponentBlocksPartnerItemInput]
  sections: [HomePageSectionsDynamicZoneInput!]
  seo: ComponentBlocksSeoInput
}

type HomePageRelationResponseCollection {
  data: [HomePageEntity!]!
}

union HomePageSectionsDynamicZone = ComponentSectionsNewsSection | ComponentSectionsNewsletterSection | ComponentSectionsOpeningHoursSection | ComponentSectionsPageSection | Error

scalar HomePageSectionsDynamicZoneInput

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type MainPage {
  createdAt: DateTime
  locale: String
  localizations(filters: MainPageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MainPageRelationResponseCollection
  publishedAt: DateTime
  sections: [MainPageSectionsDynamicZone]
  seo: ComponentBlocksSeo
  slug: String!
  title: String!
  updatedAt: DateTime
}

type MainPageEntity {
  attributes: MainPage
  id: ID
}

type MainPageEntityResponse {
  data: MainPageEntity
}

type MainPageEntityResponseCollection {
  data: [MainPageEntity!]!
  meta: ResponseCollectionMeta!
}

input MainPageFiltersInput {
  and: [MainPageFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: MainPageFiltersInput
  not: MainPageFiltersInput
  or: [MainPageFiltersInput]
  publishedAt: DateTimeFilterInput
  seo: ComponentBlocksSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MainPageInput {
  publishedAt: DateTime
  sections: [MainPageSectionsDynamicZoneInput!]
  seo: ComponentBlocksSeoInput
  slug: String
  title: String
}

type MainPageRelationResponseCollection {
  data: [MainPageEntity!]!
}

union MainPageSectionsDynamicZone = ComponentSectionsDisclosureSection | ComponentSectionsExhibitionArchiveSection | ComponentSectionsExhibitionsSection | ComponentSectionsExploreSection | ComponentSectionsGlobalSearchSection | ComponentSectionsHighlightsSection | ComponentSectionsMapSection | ComponentSectionsNewsSection | ComponentSectionsNewsletterSection | ComponentSectionsOpeningHoursSection | ComponentSectionsPageSection | ComponentSectionsPartnersSection | ComponentSectionsRichtextSection | ComponentSectionsTicketsSection | Error

scalar MainPageSectionsDynamicZoneInput

type Menu {
  createdAt: DateTime
  locale: String
  localizations: MenuRelationResponseCollection
  menuLinks(filters: ComponentBlocksMenuLinkItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksMenuLinkItem]
  searchLink: ComponentBlocksMenuLinkItem
  updatedAt: DateTime
}

type MenuEntity {
  attributes: Menu
  id: ID
}

type MenuEntityResponse {
  data: MenuEntity
}

type MenuEntityResponseCollection {
  data: [MenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenuFiltersInput {
  and: [MenuFiltersInput]
  createdAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: MenuFiltersInput
  menuLinks: ComponentBlocksMenuLinkItemFiltersInput
  not: MenuFiltersInput
  or: [MenuFiltersInput]
  searchLink: ComponentBlocksMenuLinkItemFiltersInput
  updatedAt: DateTimeFilterInput
}

input MenuInput {
  menuLinks: [ComponentBlocksMenuLinkItemInput]
  searchLink: ComponentBlocksMenuLinkItemInput
}

type MenuRelationResponseCollection {
  data: [MenuEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createAboutUsPageLocalization(data: AboutUsPageInput, id: ID, locale: I18NLocaleCode): AboutUsPageEntityResponse
  createCollectionsPageLocalization(data: CollectionsPageInput, id: ID, locale: I18NLocaleCode): CollectionsPageEntityResponse
  createContactCard(data: ContactCardInput!, locale: I18NLocaleCode): ContactCardEntityResponse
  createContactCardLocalization(data: ContactCardInput, id: ID, locale: I18NLocaleCode): ContactCardEntityResponse
  createContentPage(data: ContentPageInput!, locale: I18NLocaleCode): ContentPageEntityResponse
  createContentPageLocalization(data: ContentPageInput, id: ID, locale: I18NLocaleCode): ContentPageEntityResponse
  createExhibitionsPageLocalization(data: ExhibitionsPageInput, id: ID, locale: I18NLocaleCode): ExhibitionsPageEntityResponse
  createExplorePageLocalization(data: ExplorePageInput, id: ID, locale: I18NLocaleCode): ExplorePageEntityResponse
  createGeneralLocalization(data: GeneralInput, id: ID, locale: I18NLocaleCode): GeneralEntityResponse
  createGetInvolvedPageLocalization(data: GetInvolvedPageInput, id: ID, locale: I18NLocaleCode): GetInvolvedPageEntityResponse
  createHomePageLocalization(data: HomePageInput, id: ID, locale: I18NLocaleCode): HomePageEntityResponse
  createMainPage(data: MainPageInput!, locale: I18NLocaleCode): MainPageEntityResponse
  createMainPageLocalization(data: MainPageInput, id: ID, locale: I18NLocaleCode): MainPageEntityResponse
  createMenuLocalization(data: MenuInput, id: ID, locale: I18NLocaleCode): MenuEntityResponse
  createPartner(data: PartnerInput!, locale: I18NLocaleCode): PartnerEntityResponse
  createPartnerLocalization(data: PartnerInput, id: ID, locale: I18NLocaleCode): PartnerEntityResponse
  createPlace(data: PlaceInput!, locale: I18NLocaleCode): PlaceEntityResponse
  createPlaceLocalization(data: PlaceInput, id: ID, locale: I18NLocaleCode): PlaceEntityResponse
  createTag(data: TagInput!, locale: I18NLocaleCode): TagEntityResponse
  createTagCategory(data: TagCategoryInput!, locale: I18NLocaleCode): TagCategoryEntityResponse
  createTagCategoryLocalization(data: TagCategoryInput, id: ID, locale: I18NLocaleCode): TagCategoryEntityResponse
  createTagLocalization(data: TagInput, id: ID, locale: I18NLocaleCode): TagEntityResponse
  createTicket(data: TicketInput!, locale: I18NLocaleCode): TicketEntityResponse
  createTicketLocalization(data: TicketInput, id: ID, locale: I18NLocaleCode): TicketEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  createVisitUsPageLocalization(data: VisitUsPageInput, id: ID, locale: I18NLocaleCode): VisitUsPageEntityResponse
  deleteAboutUsPage(locale: I18NLocaleCode): AboutUsPageEntityResponse
  deleteCollectionsPage(locale: I18NLocaleCode): CollectionsPageEntityResponse
  deleteContactCard(id: ID!, locale: I18NLocaleCode): ContactCardEntityResponse
  deleteContentPage(id: ID!, locale: I18NLocaleCode): ContentPageEntityResponse
  deleteExhibitionsPage(locale: I18NLocaleCode): ExhibitionsPageEntityResponse
  deleteExplorePage(locale: I18NLocaleCode): ExplorePageEntityResponse
  deleteGeneral(locale: I18NLocaleCode): GeneralEntityResponse
  deleteGetInvolvedPage(locale: I18NLocaleCode): GetInvolvedPageEntityResponse
  deleteHomePage(locale: I18NLocaleCode): HomePageEntityResponse
  deleteMainPage(id: ID!, locale: I18NLocaleCode): MainPageEntityResponse
  deleteMenu(locale: I18NLocaleCode): MenuEntityResponse
  deletePartner(id: ID!, locale: I18NLocaleCode): PartnerEntityResponse
  deletePlace(id: ID!, locale: I18NLocaleCode): PlaceEntityResponse
  deleteTag(id: ID!, locale: I18NLocaleCode): TagEntityResponse
  deleteTagCategory(id: ID!, locale: I18NLocaleCode): TagCategoryEntityResponse
  deleteTicket(id: ID!, locale: I18NLocaleCode): TicketEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  deleteVisitUsPage(locale: I18NLocaleCode): VisitUsPageEntityResponse

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAboutUsPage(data: AboutUsPageInput!, locale: I18NLocaleCode): AboutUsPageEntityResponse
  updateCollectionsPage(data: CollectionsPageInput!, locale: I18NLocaleCode): CollectionsPageEntityResponse
  updateContactCard(data: ContactCardInput!, id: ID!, locale: I18NLocaleCode): ContactCardEntityResponse
  updateContentPage(data: ContentPageInput!, id: ID!, locale: I18NLocaleCode): ContentPageEntityResponse
  updateExhibitionsPage(data: ExhibitionsPageInput!, locale: I18NLocaleCode): ExhibitionsPageEntityResponse
  updateExplorePage(data: ExplorePageInput!, locale: I18NLocaleCode): ExplorePageEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGeneral(data: GeneralInput!, locale: I18NLocaleCode): GeneralEntityResponse
  updateGetInvolvedPage(data: GetInvolvedPageInput!, locale: I18NLocaleCode): GetInvolvedPageEntityResponse
  updateHomePage(data: HomePageInput!, locale: I18NLocaleCode): HomePageEntityResponse
  updateMainPage(data: MainPageInput!, id: ID!, locale: I18NLocaleCode): MainPageEntityResponse
  updateMenu(data: MenuInput!, locale: I18NLocaleCode): MenuEntityResponse
  updatePartner(data: PartnerInput!, id: ID!, locale: I18NLocaleCode): PartnerEntityResponse
  updatePlace(data: PlaceInput!, id: ID!, locale: I18NLocaleCode): PlaceEntityResponse
  updateTag(data: TagInput!, id: ID!, locale: I18NLocaleCode): TagEntityResponse
  updateTagCategory(data: TagCategoryInput!, id: ID!, locale: I18NLocaleCode): TagCategoryEntityResponse
  updateTicket(data: TicketInput!, id: ID!, locale: I18NLocaleCode): TicketEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  updateVisitUsPage(data: VisitUsPageInput!, locale: I18NLocaleCode): VisitUsPageEntityResponse
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Partner {
  createdAt: DateTime
  link: String
  locale: String
  localizations(filters: PartnerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PartnerRelationResponseCollection
  logo: UploadFileEntityResponse!
  title: String!
  updatedAt: DateTime
}

type PartnerEntity {
  attributes: Partner
  id: ID
}

type PartnerEntityResponse {
  data: PartnerEntity
}

type PartnerEntityResponseCollection {
  data: [PartnerEntity!]!
  meta: ResponseCollectionMeta!
}

input PartnerFiltersInput {
  and: [PartnerFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  link: StringFilterInput
  locale: StringFilterInput
  localizations: PartnerFiltersInput
  not: PartnerFiltersInput
  or: [PartnerFiltersInput]
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PartnerInput {
  link: String
  logo: ID
  title: String
}

type PartnerRelationResponseCollection {
  data: [PartnerEntity!]!
}

type Place {
  address: String!
  contentPages(filters: ContentPageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContentPageRelationResponseCollection
  createdAt: DateTime
  locale: String
  localizations(filters: PlaceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PlaceRelationResponseCollection
  purchaseId: String
  slug: String!
  title: String!
  updatedAt: DateTime
}

type PlaceEntity {
  attributes: Place
  id: ID
}

type PlaceEntityResponse {
  data: PlaceEntity
}

type PlaceEntityResponseCollection {
  data: [PlaceEntity!]!
  meta: ResponseCollectionMeta!
}

input PlaceFiltersInput {
  address: StringFilterInput
  and: [PlaceFiltersInput]
  contentPages: ContentPageFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: PlaceFiltersInput
  not: PlaceFiltersInput
  or: [PlaceFiltersInput]
  purchaseId: StringFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PlaceInput {
  address: String
  contentPages: [ID]
  purchaseId: String
  slug: String
  title: String
}

type PlaceRelationResponseCollection {
  data: [PlaceEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  aboutUsPage(locale: I18NLocaleCode): AboutUsPageEntityResponse
  collectionsPage(locale: I18NLocaleCode): CollectionsPageEntityResponse
  contactCard(id: ID, locale: I18NLocaleCode): ContactCardEntityResponse
  contactCards(filters: ContactCardFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): ContactCardEntityResponseCollection
  contentPage(id: ID, locale: I18NLocaleCode): ContentPageEntityResponse
  contentPageBySlug(isPublished: Boolean, locale: I18NLocaleCode, slug: String): ContentPageEntityResponse
  contentPages(filters: ContentPageFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContentPageEntityResponseCollection
  exhibitionsPage(locale: I18NLocaleCode): ExhibitionsPageEntityResponse
  explorePage(locale: I18NLocaleCode): ExplorePageEntityResponse
  general(locale: I18NLocaleCode): GeneralEntityResponse
  getInvolvedPage(locale: I18NLocaleCode): GetInvolvedPageEntityResponse
  homePage(locale: I18NLocaleCode): HomePageEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  mainPage(id: ID, locale: I18NLocaleCode): MainPageEntityResponse
  mainPages(filters: MainPageFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MainPageEntityResponseCollection
  me: UsersPermissionsMe
  menu(locale: I18NLocaleCode): MenuEntityResponse
  partner(id: ID, locale: I18NLocaleCode): PartnerEntityResponse
  partners(filters: PartnerFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): PartnerEntityResponseCollection
  place(id: ID, locale: I18NLocaleCode): PlaceEntityResponse
  placeBySlug(isPublished: Boolean, locale: I18NLocaleCode, slug: String): PlaceEntityResponse
  places(filters: PlaceFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): PlaceEntityResponseCollection
  tag(id: ID, locale: I18NLocaleCode): TagEntityResponse
  tagBySlug(isPublished: Boolean, locale: I18NLocaleCode, slug: String): TagEntityResponse
  tagCategories(filters: TagCategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): TagCategoryEntityResponseCollection
  tagCategory(id: ID, locale: I18NLocaleCode): TagCategoryEntityResponse
  tagCategoryBySlug(isPublished: Boolean, locale: I18NLocaleCode, slug: String): TagCategoryEntityResponse
  tags(filters: TagFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): TagEntityResponseCollection
  ticket(id: ID, locale: I18NLocaleCode): TicketEntityResponse
  tickets(filters: TicketFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TicketEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  visitUsPage(locale: I18NLocaleCode): VisitUsPageEntityResponse
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tag {
  contentPages(filters: ContentPageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ContentPageRelationResponseCollection
  createdAt: DateTime
  locale: String
  localizations(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  slug: String!
  tagCategory: TagCategoryEntityResponse
  title: String!
  titleInternal: String
  updatedAt: DateTime
}

type TagCategory {
  createdAt: DateTime
  locale: String
  localizations(filters: TagCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagCategoryRelationResponseCollection
  slug: String!
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type TagCategoryEntity {
  attributes: TagCategory
  id: ID
}

type TagCategoryEntityResponse {
  data: TagCategoryEntity
}

type TagCategoryEntityResponseCollection {
  data: [TagCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input TagCategoryFiltersInput {
  and: [TagCategoryFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: TagCategoryFiltersInput
  not: TagCategoryFiltersInput
  or: [TagCategoryFiltersInput]
  slug: StringFilterInput
  tags: TagFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TagCategoryInput {
  slug: String
  tags: [ID]
  title: String
}

type TagCategoryRelationResponseCollection {
  data: [TagCategoryEntity!]!
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  and: [TagFiltersInput]
  contentPages: ContentPageFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: TagFiltersInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  slug: StringFilterInput
  tagCategory: TagCategoryFiltersInput
  title: StringFilterInput
  titleInternal: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TagInput {
  contentPages: [ID]
  slug: String
  tagCategory: ID
  title: String
  titleInternal: String
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

type Ticket {
  createdAt: DateTime
  description: String
  locale: String
  localizations(filters: TicketFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TicketRelationResponseCollection
  price: Int
  publishedAt: DateTime
  purchaseIdGift: String
  purchaseIdSelf: String
  title: String!
  updatedAt: DateTime
}

type TicketEntity {
  attributes: Ticket
  id: ID
}

type TicketEntityResponse {
  data: TicketEntity
}

type TicketEntityResponseCollection {
  data: [TicketEntity!]!
  meta: ResponseCollectionMeta!
}

input TicketFiltersInput {
  and: [TicketFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: TicketFiltersInput
  not: TicketFiltersInput
  or: [TicketFiltersInput]
  price: IntFilterInput
  publishedAt: DateTimeFilterInput
  purchaseIdGift: StringFilterInput
  purchaseIdSelf: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TicketInput {
  description: String
  price: Int
  publishedAt: DateTime
  purchaseIdGift: String
  purchaseIdSelf: String
  title: String
}

type TicketRelationResponseCollection {
  data: [TicketEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type VisitUsPage {
  createdAt: DateTime
  highlights(filters: ComponentBlocksContentPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContentPageItem]
  locale: String
  localizations: VisitUsPageRelationResponseCollection
  sections: [VisitUsPageSectionsDynamicZone]
  seo: ComponentBlocksSeo
  updatedAt: DateTime
}

type VisitUsPageEntity {
  attributes: VisitUsPage
  id: ID
}

type VisitUsPageEntityResponse {
  data: VisitUsPageEntity
}

type VisitUsPageEntityResponseCollection {
  data: [VisitUsPageEntity!]!
  meta: ResponseCollectionMeta!
}

input VisitUsPageFiltersInput {
  and: [VisitUsPageFiltersInput]
  createdAt: DateTimeFilterInput
  highlights: ComponentBlocksContentPageItemFiltersInput
  locale: StringFilterInput
  localizations: VisitUsPageFiltersInput
  not: VisitUsPageFiltersInput
  or: [VisitUsPageFiltersInput]
  seo: ComponentBlocksSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input VisitUsPageInput {
  highlights: [ComponentBlocksContentPageItemInput]
  sections: [VisitUsPageSectionsDynamicZoneInput!]
  seo: ComponentBlocksSeoInput
}

type VisitUsPageRelationResponseCollection {
  data: [VisitUsPageEntity!]!
}

union VisitUsPageSectionsDynamicZone = ComponentSectionsMapSection | ComponentSectionsNewsSection | ComponentSectionsNewsletterSection | ComponentSectionsOpeningHoursSection | ComponentSectionsPageSection | ComponentSectionsRichtextSection | ComponentSectionsTicketsSection | Error

scalar VisitUsPageSectionsDynamicZoneInput
